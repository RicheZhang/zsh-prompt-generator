{"version":3,"sources":["redux/reducer.ts","redux/store.ts","components/PromptItemList.tsx","container/PromptItemList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","prompt","rprompt","selectedPrompt","selectedPromptItem","promptReducer","createSlice","reducers","initialize","selectPrompt","state","_ref","payload","Object","assign","addPromptItem","_ref2","push","objectSpread","id","uuid","fgColor","bgColor","reducer","actions","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","useStyles","makeStyles","nested","paddingLeft","PromptItemList","props","onItemClick","classes","react","List","type","items","label","shRepr","map","item","key","ListItem","ListItemText","primary","disablePadding","button","className","onClick","container_PromptItemList","dispatch","useDispatch","App","react_default","a","createElement","es","store","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAiBMA,EAAsB,CAC1BC,OAAQ,GACRC,QAAS,GACTC,eAAgB,SAChBC,mBAAoB,MAGhBC,EAAgBC,YAAY,CAChCN,eACAO,SAAU,CACRC,WAAY,kBAAMR,GAClBS,aAAc,SAACC,EAADC,GAAgE,IAA/CC,EAA+CD,EAA/CC,QAC7BC,OAAOC,OAAOJ,EAAO,CAAEP,eAAgBS,KAEzCG,cAAe,SACbL,EADaM,GAGV,IADDJ,EACCI,EADDJ,QAE2B,WAAzBF,EAAMP,eACRO,EAAMT,OAAOgB,KAAbJ,OAAAK,EAAA,EAAAL,CAAA,CAAoBM,GAAIC,MAAQC,QAAS,KAAMC,QAAS,MAASV,IAEjEF,EAAMR,QAAQe,KAAdJ,OAAAK,EAAA,EAAAL,CAAA,CAAqBM,GAAIC,MAAQC,QAAS,KAAMC,QAAS,MAASV,QAOxEW,EAEElB,EAFFkB,UAEElB,EADFmB,QAAqCT,KAA1BP,aAAYC,eAAcM,eC3CxBU,wBACbF,EAEAG,OAAOC,8BAAgCD,OAAOC,gECY1CC,EAAYC,YAAW,CAC3BC,OAAQ,CACNC,YAAa,UAIF,SAASC,EAAeC,GAAc,IAC3CC,EAAgBD,EAAhBC,YACFC,EAAUP,IAsBhB,OACEQ,EAAA,cAACC,EAAA,EAAD,KArBgC,CAChC,CACEC,KAAM,oBACNC,MAAO,CACL,CAAEC,MAAO,YAAaC,OAAQ,MAC9B,CAAED,MAAO,WAAYC,OAAQ,MAC7B,CAAED,MAAO,gBAAiBC,OAAQ,QAGtC,CACEH,KAAM,gBACNC,MAAO,CACL,CAAEC,MAAO,aAAcC,OAAQ,MAC/B,CAAED,MAAO,wBAAyBC,OAAQ,MAC1C,CAAED,MAAO,+BAAgCC,OAAQ,MACjD,CAAED,MAAO,eAAgBC,OAAQ,MACjC,CAAED,MAAO,iBAAkBC,OAAQ,SAMxBC,IAAI,SAAAC,GAAI,OACnBP,EAAA,cAACA,EAAA,SAAD,CAAgBQ,IAAKD,EAAKL,MACxBF,EAAA,cAACS,EAAA,EAAD,KACET,EAAA,cAACU,EAAA,EAAD,CAAcC,QAASJ,EAAKL,QAE7BK,EAAKJ,MAAMG,IAAI,SAAA/B,GAAA,IAAG6B,EAAH7B,EAAG6B,MAAOC,EAAV9B,EAAU8B,OAAV,OACdL,EAAA,cAACC,EAAA,EAAD,CAAMW,gBAAc,EAACJ,IAAKJ,GACxBJ,EAAA,cAACS,EAAA,EAAD,CACEI,QAAM,EACNC,UAAWf,EAAQL,OACnBqB,QAAS,kBAAMjB,EAAY,CAAEM,QAAOC,aAEpCL,EAAA,cAACU,EAAA,EAAD,CAAcC,QAASP,YCzDxB,IAAAY,EAAA,WACb,IAAMC,EAAWC,cACjB,OACElB,EAAA,cAACJ,EAAD,CACEE,YAAa,SAAAvB,GAAA,IAAG6B,EAAH7B,EAAG6B,MAAOC,EAAV9B,EAAU8B,OAAV,OAAuBY,EAAStC,EAAc,CAAEyB,QAAOC,gBCO3Dc,MAVf,WACE,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,MAAOA,GACfJ,EAAAC,EAAAC,cAACN,EAAD,SCEYS,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe,SD+H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1ef2929f.chunk.js","sourcesContent":["import { IPromptItem } from './../types';\nimport { createSlice, PayloadAction } from 'redux-starter-kit';\nimport uuid from 'uuid/v4';\n\ntype ID = string;\n\ninterface IdentifiablePromptItem extends IPromptItem {\n  id: ID;\n}\n\nexport interface State {\n  prompt: IdentifiablePromptItem[];\n  rprompt: IdentifiablePromptItem[];\n  selectedPrompt: 'prompt' | 'rprompt';\n  selectedPromptItem: ID | null;\n}\n\nconst initialState: State = {\n  prompt: [],\n  rprompt: [],\n  selectedPrompt: 'prompt',\n  selectedPromptItem: null,\n};\n\nconst promptReducer = createSlice({\n  initialState,\n  reducers: {\n    initialize: () => initialState,\n    selectPrompt: (state: State, { payload }: PayloadAction<'left' | 'right'>) => {\n      Object.assign(state, { selectedPrompt: payload });\n    },\n    addPromptItem: (\n      state: State,\n      { payload }: PayloadAction<{ label: string; shRepr: string }>\n    ) => {\n      if (state.selectedPrompt === 'prompt') {\n        state.prompt.push({ id: uuid(), fgColor: null, bgColor: null, ...payload });\n      } else {\n        state.rprompt.push({ id: uuid(), fgColor: null, bgColor: null, ...payload });\n      }\n    },\n  },\n});\n\nexport const {\n  reducer,\n  actions: { initialize, selectPrompt, addPromptItem },\n} = promptReducer;\n","import { createStore } from 'redux';\nimport { reducer } from './reducer';\n\nexport default createStore(\n  reducer,\n  // @ts-ignore\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","import * as React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { makeStyles } from '@material-ui/styles';\n\ninterface Props {\n  onItemClick: (item: { label: string; shRepr: string }) => void;\n}\n\ninterface PromptItem {\n  type: string;\n  items: Array<{\n    label: string;\n    shRepr: string;\n  }>;\n}\n\nconst useStyles = makeStyles({\n  nested: {\n    paddingLeft: '40px',\n  },\n});\n\nexport default function PromptItemList(props: Props) {\n  const { onItemClick } = props;\n  const classes = useStyles();\n\n  const promptItems: PromptItem[] = [\n    {\n      type: 'Login information',\n      items: [\n        { label: 'User name', shRepr: '%n' },\n        { label: 'Hostname', shRepr: '%m' },\n        { label: 'Full hostname', shRepr: '%M' },\n      ],\n    },\n    {\n      type: 'Date and time',\n      items: [\n        { label: 'yyyy-mm-dd', shRepr: '%D' },\n        { label: 'Current time(24-hour)', shRepr: '%T' },\n        { label: 'Current time(12-hour, am/pm)', shRepr: '%@' },\n        { label: 'Date(day-dd)', shRepr: '%w' },\n        { label: 'Date(mm/dd/yy)', shRepr: '%w' },\n      ],\n    },\n  ];\n  return (\n    <List>\n      {promptItems.map(item => (\n        <React.Fragment key={item.type}>\n          <ListItem>\n            <ListItemText primary={item.type} />\n          </ListItem>\n          {item.items.map(({ label, shRepr }) => (\n            <List disablePadding key={label}>\n              <ListItem\n                button\n                className={classes.nested}\n                onClick={() => onItemClick({ label, shRepr })}\n              >\n                <ListItemText primary={label} />\n              </ListItem>\n            </List>\n          ))}\n        </React.Fragment>\n      ))}\n    </List>\n  );\n}\n","import * as React from 'react';\nimport { useDispatch } from 'react-redux';\nimport PromptItemList from '../components/PromptItemList';\nimport { addPromptItem } from '../redux/reducer';\n\nexport default function() {\n  const dispatch = useDispatch();\n  return (\n    <PromptItemList\n      onItemClick={({ label, shRepr }) => dispatch(addPromptItem({ label, shRepr }))}\n    />\n  );\n}\n","import React from 'react';\nimport 'typeface-roboto';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport PromptItemList from './container/PromptItemList';\n\nfunction App() {\n  return (\n    <div>\n      <Provider store={store}>\n        <PromptItemList />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}